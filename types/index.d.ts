declare class Client {
  constructor(options) {
  changePassword(user: string, host: string, newpass: string): Promise<any>;
  changeRoomOption(name: string, service: string, option: string, value: string): Promise<any>;
  checkAccount(user: string, host: string): Promise<any>;
  checkPassword(user: string, host: string, password: string): Promise<any>;
  connectedUsers(): Promise<any>;
  connectedUsersInfo(): Promise<any>;
  connectedUsersNumber(): Promise<any>;
  connectedUsersVhost(host: string): Promise<any>;
  createRoom(name: string, service: string, host: string): Promise<any>;
  createRoomWithOpts(name: string, service: string, host: string, options: string): Promise<any>;
  deleteExpiredMessages(): Promise<any>;
  deleteOldMamMessages(type: string, days: string): Promise<any>;
  deleteOldMessages(days: string): Promise<any>;
  deleteOldPushSessions(days: string): Promise<any>;
  deleteOldUsers(days: string): Promise<any>;
  deleteOldUsersVhost(host: string, days: string): Promise<any>;
  deleteRosteritem(localuser: string, localserver: string, user: string, server: string): Promise<any>;
  destroyRoom(name: string, service: string): Promise<any>;
  getLast(user: string, host: string): Promise<any>;
  getLoglevel(): Promise<any>;
  getOfflineCount(user: string, server: string): Promise<any>;
  getPresence(user: string, server: string): Promise<any>;
  getRoomAffiliation(name: string, service: string, jid: string): Promise<any>;
  getRoomAffiliations(name: string, service: string): Promise<any>;
  getRoomOccupants(name: string, service: string): Promise<any>;
  getRoomOccupantsNumber(name: string, service: string): Promise<any>;
  getRoomOptions(name: string, service: string): Promise<any>;
  getRoster(user: string, server: string): Promise<any>;
  getSubscribers(name: string, service: string): Promise<any>;
  getUserRooms(user: string, host: string): Promise<any>;
  getVcard(user: string, host: string, name: string): Promise<any>;
  getVcard2(user: string, host: string, name: string, subname: string): Promise<any>;
  getVcard2Multi(user: string, host: string, name: string, subname: string): Promise<any>;
  kickSession(user: string, host: string, resource: string, reason: string): Promise<any>;
  kickUser(user: string, host: string): Promise<any>;
  mucOnlineRooms(host: string): Promise<any>;
  mucOnlineRoomsByRegex(host: string, regex: string): Promise<any>;
  mucRegisterNick(nick: string, jid: string, serverhost: string): Promise<any>;
  mucUnregisterNick(jid: string, serverhost: string): Promise<any>;
  numActiveUsers(host: string, days: string): Promise<any>;
  numResources(user: string, host: string): Promise<any>;
  oauthIssueToken(jid: string, ttl: string, scopes: string): Promise<any>;
  oauthListTokens(): Promise<any>;
  oauthRevokeToken(token: string): Promise<any>;
  privacySet(user: string, host: string, xmlquery: string): Promise<any>;
  privateGet(user: string, host: string, element: string, ns: string): Promise<any>;
  privateSet(user: string, host: string, element: string): Promise<any>;
  pushAlltoall(host: string, group: string): Promise<any>;
  register(user: string, host: string, password: string): Promise<any>;
  registeredUsers(host: string): Promise<any>;
  registeredVhosts(): Promise<any>;
  removeMamForUser(user: string, server: string): Promise<any>;
  removeMamForUserWithPeer(user: string, server: string, with: string): Promise<any>;
  resourceNum(): Promise<any>;
  roomsUnusedDestroy(host: string, days: string): Promise<any>;
  roomsUnusedList(host: string, days: string): Promise<any>;
  sendDirectInvitation(name: string, service: string, password: string, reason: string, users: string): Promise<any>;
  sendMessage(type: string, from: string, to: string, subject: string, body: string): Promise<any>;
  sendStanza(from: string, to: string, stanza: string): Promise<any>;
  setNickname(user: string, host: string, nickname: string): Promise<any>;
  setPresence(user: string, host: string, resource: string, type: string, show: string, status: string, priority: string): Promise<any>;
  setRoomAffiliation(name: string, server: string, jid: string, affiliation: string): Promise<any>;
  setVcard(user: string, host: string, name: string, content: string): Promise<any>;
  setVcard2(user: string, host: string, name: string, subname: string, content: string): Promise<any>;
  setVcard2Multi(user: string, host: string, name: string, subname: string, contents: string): Promise<any>;
  srgCreate(group: string, host: string, name: string, description: string, display: string): Promise<any>;
  srgDelete(group: string, host: string): Promise<any>;
  srgGetInfo(group: string, host: string): Promise<any>;
  srgGetMembers(group: string, host: string): Promise<any>;
  srgList(host: string): Promise<any>;
  srgUserAdd(user: string, host: string, group: string, grouphost: string): Promise<any>;
  srgUserDel(user: string, host: string, group: string, grouphost: string): Promise<any>;
  stats(name: string): Promise<any>;
  statsHost(name: string, host: string): Promise<any>;
  status(): Promise<any>;
  statusList(status: string): Promise<any>;
  statusListHost(host: string, status: string): Promise<any>;
  statusNum(status: string): Promise<any>;
  statusNumHost(host: string, status: string): Promise<any>;
  subscribeRoom(user: string, nick: string, room: string, nodes: string): Promise<any>;
  unregister(user: string, host: string): Promise<any>;
  unsubscribeRoom(user: string, room: string): Promise<any>;
  userResources(user: string, host: string): Promise<any>;
  userSessionsInfo(user: string, host: string): Promise<any>;
}
